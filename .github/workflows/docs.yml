name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-gen-files mkdocs-literate-nav mkdocs-section-index

    - name: Setup docs structure
      run: |
        mkdir -p docs

        # Create mkdocs.yml if it doesn't exist
        if [ ! -f "mkdocs.yml" ]; then
          cat > mkdocs.yml << EOF
        site_name: Neon CRM Python SDK
        site_description: Python SDK for the Neon CRM API
        site_url: https://$(echo ${{ github.repository }} | cut -d'/' -f1).github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/
        repo_url: https://github.com/${{ github.repository }}
        repo_name: ${{ github.repository }}

        theme:
          name: material
          palette:
            - scheme: default
              primary: blue
              accent: light blue
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.expand
            - navigation.top
            - search.highlight
            - content.code.copy

        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  options:
                    docstring_style: google
                    show_source: true
          - gen-files:
              scripts:
                - docs/gen_ref_pages.py
          - literate-nav:
              nav_file: SUMMARY.md
          - section-index

        nav:
          - Home: index.md
          - Getting Started: getting-started.md
          - API Reference: reference/
          - Examples: examples.md
          - Changelog: changelog.md

        markdown_extensions:
          - pymdownx.highlight:
              anchor_linenums: true
          - pymdownx.inlinehilite
          - pymdownx.snippets
          - pymdownx.superfences
          - admonition
          - pymdownx.details
          - pymdownx.tabbed:
              alternate_style: true
        EOF
        fi

        # Create documentation files
        cat > docs/index.md << 'EOF'
        # Neon CRM Python SDK

        A professional Python SDK for the Neon CRM API.

        ## Features

        - **Complete API Coverage**: Support for all Neon CRM endpoints
        - **Type Safety**: Full type hints and validation with Pydantic
        - **Async Support**: Both synchronous and asynchronous clients
        - **Automatic Pagination**: Seamless handling of paginated responses
        - **Error Handling**: Comprehensive error handling with custom exceptions
        - **Testing**: Extensive test suite with both unit and regression tests

        ## Quick Start

        ```python
        from neon_crm import NeonClient

        # Initialize client
        client = NeonClient(
            org_id="your_org_id",
            api_key="your_api_key",
            environment="trial"  # or "production"
        )

        # List accounts
        for account in client.accounts.list(page_size=10):
            print(f"{account['firstName']} {account['lastName']}")

        # Create an account
        new_account = client.accounts.create({
            "individualAccount": {
                "accountType": "INDIVIDUAL",
                "firstName": "John",
                "lastName": "Doe",
                "email": "john.doe@example.com"
            }
        })
        ```

        ## Installation

        ```bash
        pip install neon-crm-sdk
        ```

        ## Next Steps

        - [Getting Started Guide](getting-started.md)
        - [API Reference](reference/)
        - [Examples](examples.md)
        EOF

        cat > docs/getting-started.md << 'EOF'
        # Getting Started

        This guide will help you get started with the Neon CRM Python SDK.

        ## Installation

        Install the SDK using pip:

        ```bash
        pip install neon-crm-sdk
        ```

        ## Authentication

        You'll need your Neon CRM organization ID and API key:

        ```python
        from neon_crm import NeonClient

        client = NeonClient(
            org_id="your_org_id",
            api_key="your_api_key",
            environment="trial"  # Use "trial" for testing, "production" for live data
        )
        ```

        ## Environment Variables

        You can also use environment variables:

        ```bash
        export NEON_ORG_ID=your_org_id
        export NEON_API_KEY=your_api_key
        export NEON_ENVIRONMENT=trial
        ```

        ```python
        import os
        from neon_crm import NeonClient

        client = NeonClient(
            org_id=os.getenv("NEON_ORG_ID"),
            api_key=os.getenv("NEON_API_KEY"),
            environment=os.getenv("NEON_ENVIRONMENT", "trial")
        )
        ```

        ## Basic Usage

        ### Listing Resources

        ```python
        # List all accounts
        for account in client.accounts.list():
            print(account)

        # List with filters
        for account in client.accounts.list(user_type="INDIVIDUAL", page_size=50):
            print(f"{account['firstName']} {account['lastName']}")
        ```

        ### Creating Resources

        ```python
        # Create an individual account
        result = client.accounts.create({
            "individualAccount": {
                "accountType": "INDIVIDUAL",
                "firstName": "Jane",
                "lastName": "Smith",
                "email": "jane.smith@example.com"
            }
        })

        account_id = result["accountId"]
        print(f"Created account with ID: {account_id}")
        ```

        ### Updating Resources

        ```python
        # Update an account
        client.accounts.update(account_id, {
            "individualAccount": {
                "phone": "+1-555-123-4567"
            }
        })

        # Partial update (patch)
        client.accounts.patch(account_id, {
            "phone": "+1-555-987-6543"
        })
        ```

        ### Error Handling

        ```python
        from neon_crm.exceptions import NeonAPIError, NeonRateLimitError

        try:
            account = client.accounts.get(account_id)
        except NeonRateLimitError:
            print("Rate limit exceeded, please wait")
        except NeonAPIError as e:
            print(f"API error: {e.message}")
        ```

        ## Next Steps

        - Explore the [API Reference](reference/) for detailed documentation
        - Check out [Examples](examples.md) for common use cases
        - Read about [Testing](reference/testing.md) your integration
        EOF

        cat > docs/examples.md << 'EOF'
        # Examples

        Common usage patterns and examples for the Neon CRM SDK.

        ## Account Management

        ### Creating Different Account Types

        ```python
        # Individual Account
        individual = client.accounts.create({
            "individualAccount": {
                "accountType": "INDIVIDUAL",
                "firstName": "John",
                "lastName": "Doe",
                "email": "john.doe@example.com",
                "phone": "+1-555-123-4567"
            }
        })

        # Company Account
        company = client.accounts.create({
            "companyAccount": {
                "accountType": "COMPANY",
                "name": "Acme Corporation",
                "email": "info@acme.com",
                "website": "https://acme.com"
            }
        })
        ```

        ### Account with Address

        ```python
        account_with_address = client.accounts.create({
            "individualAccount": {
                "accountType": "INDIVIDUAL",
                "firstName": "Jane",
                "lastName": "Smith",
                "email": "jane.smith@example.com"
            },
            "addresses": [{
                "addressType": "Home",
                "streetAddress1": "123 Main St",
                "city": "Springfield",
                "state": "IL",
                "zipCode": "62701",
                "country": "USA",
                "isPrimaryAddress": True
            }]
        })
        ```

        ## Search and Filtering

        ### Advanced Search

        ```python
        from neon_crm.types import SearchRequest

        search_request: SearchRequest = {
            "searchFields": [
                {
                    "field": "firstName",
                    "operator": "EQUAL",
                    "value": "John"
                },
                {
                    "field": "userType",
                    "operator": "EQUAL",
                    "value": "INDIVIDUAL"
                }
            ],
            "outputFields": ["accountId", "firstName", "lastName", "email"],
            "pagination": {
                "currentPage": 1,
                "pageSize": 25
            }
        }

        results = list(client.accounts.search(search_request))
        ```

        ## Donations

        ### Listing Donations with Filters

        ```python
        # Donations from a specific campaign
        for donation in client.donations.list(campaign_id=123, page_size=50):
            print(f"Donation: ${donation['amount']} from {donation['date']}")

        # Donations within date range
        for donation in client.donations.list(
            start_date="2024-01-01",
            end_date="2024-12-31"
        ):
            print(f"Donation ID: {donation['donationId']}")
        ```

        ## Events

        ### Event Management

        ```python
        # List published events
        for event in client.events.list(event_status="published"):
            print(f"Event: {event['name']} on {event['startDate']}")

        # Events by category
        for event in client.events.list(category_id=456):
            print(f"Event: {event['name']}")
        ```

        ## Households

        ### Managing Household Members

        ```python
        # Create a household
        household = client.households.create({
            "name": "The Smith Family",
            "primaryAccountId": primary_account_id
        })

        household_id = household["householdId"]

        # Add member to household
        client.households.add_member(household_id, member_account_id)

        # Remove member from household
        client.households.remove_member(household_id, member_account_id)
        ```

        ## Webhooks

        ### Webhook Management

        ```python
        # Create a webhook
        webhook = client.webhooks.create_webhook(
            url="https://your-server.com/webhook",
            event_types=["account.created", "donation.created"],
            description="My webhook for account and donation events"
        )

        webhook_id = webhook["webhookId"]

        # Test the webhook
        client.webhooks.test_webhook(webhook_id)

        # Update webhook
        client.webhooks.update_webhook(
            webhook_id=webhook_id,
            event_types=["account.created"],  # Reduced to just account events
            description="Updated webhook description"
        )
        ```

        ## Error Handling Patterns

        ### Robust Error Handling

        ```python
        from neon_crm.exceptions import (
            NeonAPIError,
            NeonAuthenticationError,
            NeonRateLimitError,
            NeonNotFoundError
        )
        import time

        def robust_api_call(client, account_id):
            max_retries = 3
            retry_delay = 1

            for attempt in range(max_retries):
                try:
                    return client.accounts.get(account_id)

                except NeonRateLimitError:
                    if attempt < max_retries - 1:
                        print(f"Rate limited, waiting {retry_delay} seconds...")
                        time.sleep(retry_delay)
                        retry_delay *= 2  # Exponential backoff
                        continue
                    raise

                except NeonNotFoundError:
                    print(f"Account {account_id} not found")
                    return None

                except NeonAuthenticationError:
                    print("Authentication failed - check your credentials")
                    raise

                except NeonAPIError as e:
                    print(f"API error: {e.message}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    raise
        ```

        ## Pagination Patterns

        ### Processing Large Datasets

        ```python
        def process_all_accounts(client):
            """Process all accounts in batches"""
            batch_size = 100
            processed = 0

            for account in client.accounts.list(page_size=batch_size):
                # Process each account
                print(f"Processing account: {account['accountId']}")
                processed += 1

                # Progress update every 1000 accounts
                if processed % 1000 == 0:
                    print(f"Processed {processed} accounts...")

            print(f"Total accounts processed: {processed}")
        ```
        EOF

        cat > docs/changelog.md << 'EOF'
        # Changelog

        All notable changes to this project will be documented in this file.

        The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
        and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

        ## [Unreleased]

        ### Added
        - Initial release of the Neon CRM Python SDK
        - Complete API coverage for Neon CRM v2.10
        - Type safety with Pydantic models
        - Comprehensive test suite
        - CI/CD pipeline with GitHub Actions
        - Security scanning and dependency checks

        ### Features
        - Account management (create, read, update, delete)
        - Donation tracking and management
        - Event management
        - Campaign management
        - Membership management
        - Household management
        - Webhook management
        - Custom fields support
        - Search and filtering capabilities
        - Automatic pagination
        - Error handling with custom exceptions
        - Both sync and async support (async coming in future release)

        ### Documentation
        - Complete API reference documentation
        - Getting started guide
        - Usage examples
        - Testing guidelines
        EOF

        # Create API reference generator
        mkdir -p docs
        cat > docs/gen_ref_pages.py << 'EOF'
        """Generate the code reference pages and navigation."""

        from pathlib import Path
        import mkdocs_gen_files

        nav = mkdocs_gen_files.Nav()

        src = Path(__file__).parent.parent / "src"

        for path in sorted(src.rglob("*.py")):
            module_path = path.relative_to(src).with_suffix("")
            doc_path = path.relative_to(src).with_suffix(".md")
            full_doc_path = Path("reference", doc_path)

            parts = tuple(module_path.parts)

            if parts[-1] == "__init__":
                parts = parts[:-1]
                doc_path = doc_path.with_name("index.md")
                full_doc_path = full_doc_path.with_name("index.md")
            elif parts[-1] == "__main__":
                continue

            nav[parts] = doc_path.as_posix()

            with mkdocs_gen_files.open(full_doc_path, "w") as fd:
                ident = ".".join(parts)
                fd.write(f"::: {ident}")

            mkdocs_gen_files.set_edit_path(full_doc_path, path)

        with mkdocs_gen_files.open("reference/SUMMARY.md", "w") as nav_file:
            nav_file.writelines(nav.build_literate_nav())
        EOF

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site

  deploy-docs:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
