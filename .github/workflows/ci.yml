name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Optimized matrix: Reduced from original 12 jobs to 6 for efficiency
        os: [ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          # Cross-platform tests with latest Python versions
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
      env:
        SKIP: mypy  # Skip mypy in CI for now

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=neon_crm --cov-report=xml --cov-report=term-missing --junitxml=junit.xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    # Run security scans on main branch and PRs to main
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run bandit security linter
      run: |
        bandit -r src/ -c .bandit -f json -o bandit-report.json || true
        bandit -r src/ -c .bandit

    - name: Run semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Install project dependencies
      run: |
        pip install -e ".[dev]"

    - name: Run dependency security audit
      run: |
        echo "üîç Checking for known vulnerabilities in dependencies..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc || true

    - name: Upload dependency audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-report
        path: pip-audit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    # Continue if test passes and security either passes or is skipped
    if: always() && needs.test.result == 'success' && (needs.security.result == 'success' || needs.security.result == 'skipped')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl

    - name: Test package import
      run: |
        python -c "import neon_crm; print(f'Successfully imported neon_crm v{neon_crm.__version__}')"

    - name: Run integration tests (if configured)
      run: |
        # Only run if integration tests exist and credentials are available
        if [ -d "tests/integration" ] && [ -n "$NEON_ORG_ID" ] && [ -n "$NEON_API_KEY" ]; then
          echo "Running integration tests..."
          pytest tests/integration/ -v
        else
          echo "Skipping integration tests (no credentials or tests not found)"
        fi
      env:
        NEON_ORG_ID: ${{ secrets.NEON_ORG_ID }}
        NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        NEON_ENVIRONMENT: trial

  comprehensive-test:
    name: Comprehensive Test Suite (Main Branch Only)
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running comprehensive test suite for main branch merge..."

        # Run all tests with extra coverage
        pytest tests/ -v --cov=neon_crm --cov-report=xml --cov-report=html --cov-report=term-missing

        # Run performance tests if they exist
        if [ -d "tests/performance" ]; then
          echo "üöÄ Running performance tests..."
          pytest tests/performance/ -v
        fi

        # Run additional regression tests
        if [ -d "tests/regression" ]; then
          echo "üîÑ Running regression tests..."
          pytest tests/regression/ -v
        fi

    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v5
      if: always()
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
        fail_ci_if_error: false

    - name: Upload comprehensive test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-results.xml
